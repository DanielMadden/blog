(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{482:function(t,s,e){"use strict";e.r(s);var a=e(2),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_2-c-lists"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-c-lists"}},[t._v("#")]),t._v(" 2: C# Lists")]),t._v(" "),e("h2",{attrs:{id:"prompts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prompts"}},[t._v("#")]),t._v(" Prompts")]),t._v(" "),e("h3",{attrs:{id:"what-is-a-list-in-c"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-is-a-list-in-c"}},[t._v("#")]),t._v(" "),e("em",[t._v("What is a List in C#?")])]),t._v(" "),e("br"),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("A list is a generic type. Very similar to an array, except it can have any amount of indices (does not have to be specified on instantiation), and it has a .Count rather than a .Length.\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("br")]),e("hr"),e("br"),e("p"),t._v(" "),e("h3",{attrs:{id:"what-list-methods-seem-like-you-might-use-them-often-why"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-list-methods-seem-like-you-might-use-them-often-why"}},[t._v("#")]),t._v(" "),e("em",[t._v("What List methods seem like you might use them often? Why?")])]),t._v(" "),e("br"),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('List.Add to "push" into an "array"\nList.Clear to reset\nList.Contains to check if it has what we want\nList.Find, List.FindAll, List.FindIndex, List.IndexOf for searching\nList.Remove for deletion\nList.Insert for insertion\nList.Sort, List.Reverse for reordering\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[e("br")]),e("hr"),e("br"),e("p"),t._v(" "),e("h3",{attrs:{id:"how-would-you-retrieve-an-item-from-a-list-what-method-could-you-use"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-would-you-retrieve-an-item-from-a-list-what-method-could-you-use"}},[t._v("#")]),t._v(" "),e("em",[t._v("How would you retrieve an item from a list? What method could you use?")])]),t._v(" "),e("br"),t._v(" "),e("div",{staticClass:"language-c# line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// I could find the index:\nList.FindIndex(item => item.Id == itemId)\n\n// I could access the item at its zero-based index:\nList[4]\n\n// I could use the find method\nList.Find(item => item.Id == itemId)\n\n// etc...\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br")])]),e("p",[e("br")]),e("hr"),e("br"),e("p")])}),[],!1,null,null,null);s.default=n.exports}}]);