(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{519:function(e,t,a){"use strict";a.r(t);var o=a(2),i=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_2-mongodb-relationships"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-mongodb-relationships"}},[e._v("#")]),e._v(" 2: MongoDb Relationships")]),e._v(" "),a("h2",{attrs:{id:"prompts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prompts"}},[e._v("#")]),e._v(" Prompts")]),e._v(" "),a("h3",{attrs:{id:"what-are-the-three-types-of-relationships"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-are-the-three-types-of-relationships"}},[e._v("#")]),e._v(" "),a("em",[e._v("What are the three types of relationships?")])]),e._v(" "),a("br"),e._v(" "),a("p",[e._v("One-To-One (1:1)")]),e._v(" "),a("p",[e._v("One-To-Many (1:A)")]),e._v(" "),a("p",[e._v("Many-To-Many (A:B)\n"),a("br"),a("br")]),a("hr"),a("br"),a("p"),e._v(" "),a("h3",{attrs:{id:"what-are-the-benefits-of-traditional-linking-of-relationships-instead-of-embedding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-are-the-benefits-of-traditional-linking-of-relationships-instead-of-embedding"}},[e._v("#")]),e._v(" "),a("em",[e._v("What are the benefits of traditional linking of relationships instead of embedding?")])]),e._v(" "),a("br"),e._v(" "),a("p",[e._v("Well, if we wanted to connect two documents of data (i.e. a "),a("code",[e._v("user")]),e._v(" vs. their "),a("code",[e._v("map")]),e._v(" data for the day) we could use a "),a("code",[e._v("foreign key")]),e._v(". A foreign key represents a signifying "),a("code",[e._v("ID")]),e._v(" that will link both types of data to one another.")]),e._v(" "),a("p",[e._v("Now, what's wrong with embedding? Well, the potential problem with embedding is that a single document's content may exceed expectations. Let's say we embed the "),a("code",[e._v("map")]),e._v(" data inside of the "),a("code",[e._v("user")]),e._v(" data as a property. After receiving our user data, we would then have to filter through the property that holds that map data... A bit of extra work.")]),e._v(" "),a("p",[e._v("The traditional practice of linking not only allows us to instantly find what we need through our database functions, but also to have more control over our file sizes!\n"),a("br"),a("br")]),a("hr"),a("br"),a("p"),e._v(" "),a("h3",{attrs:{id:"what-are-some-challenges-faced-when-deciding-how-to-manage-a-many-to-many-relationship-that-ultimately-drive-your-decision-on-how-to-create-it"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-are-some-challenges-faced-when-deciding-how-to-manage-a-many-to-many-relationship-that-ultimately-drive-your-decision-on-how-to-create-it"}},[e._v("#")]),e._v(" "),a("em",[e._v("What are some challenges faced when deciding how to manage a many-to-many relationship that ultimately drive your decision on how to create it?")])]),e._v(" "),a("br"),e._v(" "),a("p",[e._v("The question is, in the relationship of "),a("code",[e._v("A:B")]),e._v(", which will hold more/less of the other one? Will "),a("code",[e._v("A")]),e._v(" have more "),a("code",[e._v("B")]),e._v(" in it? Or will "),a("code",[e._v("B")]),e._v(" have more "),a("code",[e._v("A")]),e._v(" in it? This is what will drive our decision.")]),e._v(" "),a("p",[e._v("Lets say "),a("code",[e._v('A = "Movie Genres"')])]),e._v(" "),a("p",[e._v("And "),a("code",[e._v('B = "Movies"')])]),e._v(" "),a("p",[e._v("Clearly, we're going to have more movies in a genre rather than the genres that each movie holds. In this case, it is best to use "),a("code",[e._v("One-Way Embedding.")])]),e._v(" "),a("br"),e._v(" "),a("p",[e._v("In some cases, if both "),a("code",[e._v("A")]),e._v(" and "),a("code",[e._v("B")]),e._v(" are similar to one another in their maximum relationships, "),a("code",[e._v("Two-Way Embedding")]),e._v(" "),a("em",[e._v("could")]),e._v(" be used. But honestly, "),a("code",[e._v("One-Way Embedding")]),e._v(" seems like the safest practice since it prepares for potential overflow of relationships in one of the categories.\n"),a("br"),a("br")]),a("hr"),a("br"),e._v("\nAfternoon Project: https://github.com/DanielMadden/BCW_GregslistAPI\n"),a("br"),a("br"),a("hr"),a("br"),a("p"),e._v(" "),a("h1",{attrs:{id:"boise-codeworks-gregslist-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boise-codeworks-gregslist-api"}},[e._v("#")]),e._v(" Boise Codeworks: Gregslist API")]),e._v(" "),a("p",[e._v("Our project today included creating an API to handle data transfers between the client and the MongoDB database. I had some spare time so I decided to write some front-end code as well to display the data in an acceptable format.")]),e._v(" "),a("br"),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Project:")]),e._v(" "),a("th",[e._v("Gregslist API")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("Course:")]),e._v(" "),a("td",[e._v("Boise Codeworks Fullstack Program")])]),e._v(" "),a("tr",[a("td",[e._v("Date:")]),e._v(" "),a("td",[e._v("January 12, 2021")])]),e._v(" "),a("tr",[a("td",[e._v("Position:")]),e._v(" "),a("td",[e._v("Week 5, Day 2")])])])])])}),[],!1,null,null,null);t.default=i.exports}}]);